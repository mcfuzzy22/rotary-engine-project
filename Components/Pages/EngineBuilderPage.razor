@page "/enginebuilder"
@* Explicitly disable prerendering to help with scoped service persistence across same-page navigation *@
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject RotaryEngineDbContext DbContext
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject rotaryproject.Services.EngineBuildStateService BuildStateService
@using Microsoft.AspNetCore.Identity
@using rotaryproject.Data
@using rotaryproject.Data.Models
@using Microsoft.EntityFrameworkCore

<PageTitle>Build Your Rotary Engine</PageTitle>

<h1>Choose Your Engine Parts</h1>

<div class="compatibility-summary my-3 p-3 bg-light border rounded" style="min-height: 50px;">
    <p class="mb-0"><em>Compatibility and overall stats will appear here. Current Total: @BuildStateService.CurrentBuild.TotalPrice.ToString("C")</em></p>
</div>
@if (isLoadingCategories)
{
    <p><em>Loading engine component structure...</em></p>
}
else if (engineMainCategories == null || !engineMainCategories.Any())
{
    <p><em>No engine component categories found. Please set up main and subcategories.</em></p>
}
else
{
    @* --- "SHARE YOUR BUILD" & "SAVE BUILD" BLOCKS --- *@
    @if (BuildStateService.CurrentBuild.SelectedParts.Any())
    {
        <div class="mt-4 mb-3 p-3 border rounded bg-light">
            <h4>Share Your Build</h4>
            <div class="input-group">
                <input type="text" class="form-control" @bind="shareableLink" readonly
                       placeholder="Click 'Generate Link' to create a shareable link." />
                <button class="btn btn-info" @onclick="GenerateShareableLink">Generate Link</button>
                @if (!string.IsNullOrEmpty(shareableLink))
                {
                    <button class="btn btn-outline-secondary" @onclick="CopyLinkToClipboard">Copy</button>
                }
            </div>
            @if (linkCopied)
            {
                <small class="text-success d-block mt-1">Link copied to clipboard!</small>
            }
        </div>

        <AuthorizeView>
            <Authorized>
                <div class="mt-3 p-3 border rounded bg-white">
                    <h4>Save This Build</h4>
                    @if (!string.IsNullOrEmpty(saveBuildMessage))
                    {
                        <div class="alert @(saveBuildSuccess ? "alert-success" : "alert-danger")">@saveBuildMessage</div>
                    }
                    <div class="input-group">
                        <input type="text" class="form-control" @bind="newBuildName" placeholder="Enter a name for your build" />
                        <button class="btn btn-success" @onclick="SaveCurrentBuild" disabled="@string.IsNullOrWhiteSpace(newBuildName)">Save Build</button>
                    </div>
                    <small class="form-text text-muted">Name your build to save it to your account.</small>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="mt-3 p-3 border rounded bg-light-subtle">
                    <p class="mb-0">Want to save this build? <a href="Account/Login?returnUrl=@ReturnUrlForLogin">Log in</a> or <a href="Account/Register">Register</a> to save your builds!</p>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    }

    @* --- HIERARCHICAL PARTS TABLE --- *@
    //<div class="table-responsive mt-3">
        //<table class="table engine-builder-table table-hover">
            <thead class="table-light">
                <tr>
                    <th style="width: 25%;">Component Group / Subcomponent</th>
                    <th style="width: 10%;">Image</th>
                    <th style="width: 25%;">Selection</th>
                    <th style="width: 10%;">Availability</th>
                    <th style="width: 10%;">Vendor</th>
                    <th style="width: 10%;">Price</th>
                    <th style="width: 15%;">Actions / Buy</th>
                </tr>
            </thead>
             //<tbody>
    @if (engineMainCategories != null)
    {
        @foreach (var mainCategory in engineMainCategories.OrderBy(m => m.DisplayOrder).ThenBy(m => m.Name))
        {
            @* --- MAIN CATEGORY ROW (e.g., BLOCK COMPONENTS) --- *@
            <tr class="table-group-divider">
                <td colspan="7"> @* Adjust colspan to your total number of <th> columns *@
                    <h5 role="button" @onclick="() => ToggleMainCategory(mainCategory.EngineMainCategoryId)" style="cursor: pointer;">
                        <span class="bi @(expandedMainCategories.Contains(mainCategory.EngineMainCategoryId) ? "bi-chevron-down" : "bi-chevron-right")"></span>
                        @mainCategory.Name : Click To Expand
                    </h5>
                </td>
            </tr>

            @* --- SUBCATEGORY ROWS (L1 - e.g., Side Housings, Rotors) --- *@
            @if (expandedMainCategories.Contains(mainCategory.EngineMainCategoryId))
            {
                @foreach (var subCategoryL1 in mainCategory.SubCategories.Where(s => s.ParentEngineSubCategoryId == null).OrderBy(s => s.DisplayOrder).ThenBy(s => s.Name))
                {
                    @* --- Row 1: For selecting a part for subCategoryL1 itself --- *@
                    <tr class="sub-item-l1 @subCategoryL1.CssColorClass">  
                        <td class="ps-4">@subCategoryL1.Name</td>
                        <td>@* Image for selected part in subCategoryL1 *@
                            @if (BuildStateService.CurrentBuild.SelectedParts.TryGetValue(subCategoryL1.EngineSubCategoryId, out Part? imgPartL1) && imgPartL1 != null && !string.IsNullOrEmpty(imgPartL1.ImagePath))
                            { <img src="@imgPartL1.ImagePath" alt="@imgPartL1.Name" style="max-width: 75px; max-height: 75px; object-fit: contain;" onerror="this.onerror=null; this.src='https://placehold.co/75x75/e1e1e1/777?text=No+Image';" /> }
                            else if (BuildStateService.CurrentBuild.SelectedParts.ContainsKey(subCategoryL1.EngineSubCategoryId))
                            { <img src="https://placehold.co/75x75/e1e1e1/777?text=No+Image" alt="No image" style="max-width: 75px; max-height: 75px; object-fit: contain;" /> }
                        </td>
                        <td>@* Selection Name & Brand for subCategoryL1 *@
                            @if (BuildStateService.CurrentBuild.SelectedParts.TryGetValue(subCategoryL1.EngineSubCategoryId, out Part? selectedPartL1) && selectedPartL1 != null)
                            {
                                <a href="/partdetail/@selectedPartL1.PartId"><strong>@selectedPartL1.Name</strong></a>
                                @if(!string.IsNullOrWhiteSpace(selectedPartL1.Brand)){ <br /><small class="text-muted">Brand: @selectedPartL1.Brand</small> }
                            }
                            else { <span class="text-muted">No part selected</span> }
                        </td>
                        <td>@* Availability for subCategoryL1 *@
                            @if (BuildStateService.CurrentBuild.SelectedParts.TryGetValue(subCategoryL1.EngineSubCategoryId, out Part? availPartL1) && availPartL1 != null)
                            { <span>@(!string.IsNullOrEmpty(availPartL1.Availability) ? availPartL1.Availability : "-")</span> }
                            else if (BuildStateService.CurrentBuild.SelectedParts.ContainsKey(subCategoryL1.EngineSubCategoryId)) { <span class="text-muted">-</span> }
                        </td>
                        <td>@* Vendor for subCategoryL1 *@
                                @if (BuildStateService.CurrentBuild.SelectedParts.TryGetValue(subCategoryL1.EngineSubCategoryId, out Part? vendorPartL1) && vendorPartL1 != null && !string.IsNullOrEmpty(vendorPartL1.VendorName))
                            {
                                @if(!string.IsNullOrEmpty(vendorPartL1.VendorProductUrl))
                                { <a href="@vendorPartL1.VendorProductUrl" target="_blank" rel="noopener noreferrer">@vendorPartL1.VendorName</a> }
                                else { <span>@vendorPartL1.VendorName</span> }
                            }
                            else if (BuildStateService.CurrentBuild.SelectedParts.ContainsKey(subCategoryL1.EngineSubCategoryId)) { <span class="text-muted">-</span> }
                        </td>
                        <td>@* Price for subCategoryL1 *@
                            @if (BuildStateService.CurrentBuild.SelectedParts.TryGetValue(subCategoryL1.EngineSubCategoryId, out Part? pricedPartL1) && pricedPartL1 != null && pricedPartL1.BasePrice.HasValue)
                            { <strong>@pricedPartL1.BasePrice.Value.ToString("C")</strong> }
                            else if (BuildStateService.CurrentBuild.SelectedParts.ContainsKey(subCategoryL1.EngineSubCategoryId)) { <span class="text-muted">N/A</span> }
                        </td>
                        <td>@* Actions for subCategoryL1 *@
                            @if (BuildStateService.CurrentBuild.SelectedParts.TryGetValue(subCategoryL1.EngineSubCategoryId, out Part? existingPartL1) && existingPartL1 != null)
                            {
                                <div class="d-flex flex-column">
                                    @if (!string.IsNullOrEmpty(existingPartL1.VendorProductUrl)) { <a href="@existingPartL1.VendorProductUrl" target="_blank" rel="noopener noreferrer" class="btn btn-success btn-sm mb-1">Buy</a> }
                                    <button class="btn btn-sm btn-outline-secondary mb-1" @onclick="() => SelectOrChangePart(subCategoryL1.EngineSubCategoryId)">Change</button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ClearPartSelection(subCategoryL1.EngineSubCategoryId)">Clear</button>
                                </div>
                            }
                            else { <button class="btn btn-sm btn-primary" @onclick="() => SelectOrChangePart(subCategoryL1.EngineSubCategoryId)">+ Choose @subCategoryL1.Name</button> }
                        </td>
                   </tr>

                    @* --- Row 2 (Conditional): Expander row for subCategoryL1's children (IF it has children) --- *@
                    @if (subCategoryL1.ChildSubCategories != null && subCategoryL1.ChildSubCategories.Any())
                    {
                        <tr class="sub-item-l1-expander @subCategoryL1.CssColorClass"> @* Optional class for styling this expander row *@
                            <td class="ps-4 pt-1 pb-1"> @* Indent to align with subCategoryL1 name *@
                                <span role="button" @onclick="() => ToggleParentSubCategoryExpansion(subCategoryL1.EngineSubCategoryId)" style="cursor: pointer; font-weight:normal; font-style:italic;">
                                    <span class="bi @(expandedParentSubCategories.Contains(subCategoryL1.EngineSubCategoryId) ? "bi-chevron-down" : "bi-chevron-right")"></span>
                                    Click to expand components

                                </span>
                            </td>
                            <td colspan="6"></td> @* Empty cells, this row is just for expanding *@
                        </tr>

                        @* If subCategoryL1 is expanded AND has children, loop through L2 children (e.g., "Dowel Pins") *@
                        @if (expandedParentSubCategories.Contains(subCategoryL1.EngineSubCategoryId))
                        {
                            @foreach (var subCategoryL2 in subCategoryL1.ChildSubCategories.OrderBy(s => s.DisplayOrder).ThenBy(s => s.Name))
                            {
                                <tr class="sub-item-l2 @subCategoryL2.CssColorClass">
                                    <td class="ps-5">@subCategoryL2.Name</td> @* Further indent L2 subcategory *@
                                    @* Cells for Part selected FOR subCategoryL2 *@
                                    <td> @* Image L2 *@
                                        @if (BuildStateService.CurrentBuild.SelectedParts.TryGetValue(subCategoryL2.EngineSubCategoryId, out Part? imgPartL2) && imgPartL2 != null && !string.IsNullOrEmpty(imgPartL2.ImagePath))
                                        { <img src="@imgPartL2.ImagePath" alt="@imgPartL2.Name" style="max-width: 75px; max-height: 75px; object-fit: contain;" onerror="this.onerror=null; this.src='https://placehold.co/75x75/e1e1e1/777?text=No+Image';" /> }
                                        else if (BuildStateService.CurrentBuild.SelectedParts.ContainsKey(subCategoryL2.EngineSubCategoryId))
                                        { <img src="https://placehold.co/75x75/e1e1e1/777?text=No+Image" alt="No image" style="max-width: 75px; max-height: 75px; object-fit: contain;" /> }
                                    </td>
                                    <td> @* Selection Name & Brand L2 *@
                                         @if (BuildStateService.CurrentBuild.SelectedParts.TryGetValue(subCategoryL2.EngineSubCategoryId, out Part? selectedPartL2) && selectedPartL2 != null)
                                         {
                                             <a href="/partdetail/@selectedPartL2.PartId"><strong>@selectedPartL2.Name</strong></a>
                                             @if(!string.IsNullOrWhiteSpace(selectedPartL2.Brand)){ <br /><small class="text-muted">Brand: @selectedPartL2.Brand</small> }
                                         }
                                         else { <span class="text-muted">No part selected</span> }
                                    </td>
                                    <td> @* Availability L2 *@
                                        @if (BuildStateService.CurrentBuild.SelectedParts.TryGetValue(subCategoryL2.EngineSubCategoryId, out Part? availPartL2) && availPartL2 != null)
                                        { <span>@(!string.IsNullOrEmpty(availPartL2.Availability) ? availPartL2.Availability : "-")</span> }
                                        else if (BuildStateService.CurrentBuild.SelectedParts.ContainsKey(subCategoryL2.EngineSubCategoryId)) { <span class="text-muted">-</span> }
                                    </td>
                                    <td> @* Vendor L2 *@
                                        @if (BuildStateService.CurrentBuild.SelectedParts.TryGetValue(subCategoryL2.EngineSubCategoryId, out Part? vendorPartL2) && vendorPartL2 != null && !string.IsNullOrEmpty(vendorPartL2.VendorName))
                                        {
                                            @if(!string.IsNullOrEmpty(vendorPartL2.VendorProductUrl))
                                            { <a href="@vendorPartL2.VendorProductUrl" target="_blank" rel="noopener noreferrer">@vendorPartL2.VendorName</a> }
                                            else { <span>@vendorPartL2.VendorName</span> }
                                        }
                                        else if (BuildStateService.CurrentBuild.SelectedParts.ContainsKey(subCategoryL2.EngineSubCategoryId)) { <span class="text-muted">-</span> }
                                    </td>
                                    <td> @* Price L2 *@
                                        @if (BuildStateService.CurrentBuild.SelectedParts.TryGetValue(subCategoryL2.EngineSubCategoryId, out Part? pricedPartL2) && pricedPartL2 != null && pricedPartL2.BasePrice.HasValue)
                                        { <strong>@pricedPartL2.BasePrice.Value.ToString("C")</strong> }
                                        else if (BuildStateService.CurrentBuild.SelectedParts.ContainsKey(subCategoryL2.EngineSubCategoryId)) { <span class="text-muted">N/A</span> }
                                    </td>
                                    <td>@* Actions L2 *@
                                         @if (BuildStateService.CurrentBuild.SelectedParts.TryGetValue(subCategoryL2.EngineSubCategoryId, out Part? existingPartL2) && existingPartL2 != null)
                                        {
                                            <div class="d-flex flex-column">
                                                @if (!string.IsNullOrEmpty(existingPartL2.VendorProductUrl)) { <a href="@existingPartL2.VendorProductUrl" target="_blank" rel="noopener noreferrer" class="btn btn-success btn-sm mb-1">Buy</a> }
                                                <button class="btn btn-sm btn-outline-secondary mb-1" @onclick="() => SelectOrChangePart(subCategoryL2.EngineSubCategoryId)">Change</button>
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ClearPartSelection(subCategoryL2.EngineSubCategoryId)">Clear</button>
                                            </div>
                                        } else { <button class="btn btn-sm btn-primary" @onclick="() => SelectOrChangePart(subCategoryL2.EngineSubCategoryId)">+ Choose @subCategoryL2.Name</button> }
                                    </td>
                                </tr>
                            }
                        } @* End of L2 subcategory loop *@
                    } @* End of L1 subcategory loop *@
                } @* End of @if mainCategory is expanded *@
            } @* End of mainCategory loop *@
        } @* End of safety null check for engineMainCategories *@
    //</tbody>
    //</table>
   // </div>
}

<style>
    .engine-builder-table th, .engine-builder-table td { vertical-align: middle; }
    .table-group-divider td {
        font-weight: bold;
        background-color: #f8f9fa; /* Light background for main category headers */
        border-top: 2px solid #dee2e6;
        border-bottom: 1px solid #dee2e6;
    }
</style>

@code {
    //[SupplyParameterFromQuery(Name = "build")]
    public string? IncomingBuildConfigurationString { get; set; }

    [SupplyParameterFromQuery]
    public int? PassedSubCategoryId { get; set; } // RENAMED from PassedCategoryId

    [SupplyParameterFromQuery]
    public int? PassedSelectedPartId { get; set; }
// In @code block of EngineBuilderPage.razor
private HashSet<int> expandedSubCategories = new HashSet<int>();
    private List<EngineMainCategory>? engineMainCategories; // CHANGED
    private bool isLoadingCategories = true; // RENAMED
    private bool _justProcessedQueryAndNavigated = false;
    private string? shareableLink;
    private bool linkCopied = false;
private HashSet<int> expandedMainCategories = new HashSet<int>();
private HashSet<int> expandedParentSubCategories = new HashSet<int>(); // For L1 subcategories that are parents
    // For Save Build UI
    private string? newBuildName;
    private string? saveBuildMessage;
    private bool saveBuildSuccess = false;
    private string ReturnUrlForLogin => Navigation.ToAbsoluteUri(Navigation.Uri).ToString();

    // For expanding/collapsing main categories

    protected override async Task OnInitializedAsync()
{
    Console.WriteLine("EngineBuilderPage: OnInitializedAsync - ENTERED.");
    isLoadingCategories = true;
    try
    {
        if (DbContext.EngineMainCategories != null)
        {
            engineMainCategories = await DbContext.EngineMainCategories
                                        .Include(m => m.SubCategories)           // Load first-level subcategories
                                            .ThenInclude(s => s.ChildSubCategories) // CRUCIAL: Load children of those subcategories
                                        .OrderBy(m => m.DisplayOrder)
                                        .ThenBy(m => m.Name)
                                        .ToListAsync();
            
            Console.WriteLine($"EngineBuilderPage: OnInitializedAsync - Loaded {engineMainCategories?.Count ?? 0} main categories.");

            // --- Add this DEBUG LOG ---
            if (engineMainCategories != null)
            {
                foreach (var mainCat in engineMainCategories)
                {
                    Console.WriteLine($"  MainCat: {mainCat.Name}");
                    foreach (var subCatL1 in mainCat.SubCategories.Where(s => s.ParentEngineSubCategoryId == null))
                    {
                        Console.WriteLine($"    L1 SubCat: {subCatL1.Name} (ID: {subCatL1.EngineSubCategoryId}), Has L2 Children: {subCatL1.ChildSubCategories.Any()}");
                        if (subCatL1.ChildSubCategories.Any())
                        {
                            foreach (var subCatL2 in subCatL1.ChildSubCategories)
                            {
                                Console.WriteLine($"      L2 SubCat: {subCatL2.Name} (ID: {subCatL2.EngineSubCategoryId})");
                            }
                        }
                    }
                }
            }
            // --- END DEBUG LOG ---
        }
        else
        {
            engineMainCategories = new List<EngineMainCategory>();
            Console.WriteLine("EngineBuilderPage: OnInitializedAsync - DbContext.EngineMainCategories DbSet is null.");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"EngineBuilderPage: OnInitializedAsync - EXCEPTION while loading categories: {ex.ToString()}");
        engineMainCategories = new List<EngineMainCategory>();
    }
    finally
    {
        isLoadingCategories = false;
    }
    Console.WriteLine("EngineBuilderPage: OnInitializedAsync - EXITED.");
}
    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine($"EngineBuilderPage ({BuildStateService.CurrentBuild.GetHashCode()}): OnParametersSetAsync - ENTERED. BuildString: '{IncomingBuildConfigurationString}', PassedSubCatId: {PassedSubCategoryId}, PassedSelPartId: {PassedSelectedPartId}, JustProcessedFlag: {_justProcessedQueryAndNavigated}");

        if (_justProcessedQueryAndNavigated)
        {
            _justProcessedQueryAndNavigated = false;
            Console.WriteLine($"EngineBuilderPage ({BuildStateService.CurrentBuild.GetHashCode()}): OnParametersSetAsync - EXITED (early, due to URL clean-up redirect).");
            return;
        }

        bool parametersWereProcessedThisCycle = false;

        if (!string.IsNullOrWhiteSpace(IncomingBuildConfigurationString))
        {
            parametersWereProcessedThisCycle = true;
            Console.WriteLine($"EngineBuilderPage: Processing build string: {IncomingBuildConfigurationString}");
            BuildStateService.CurrentBuild.SelectedParts.Clear();

            var categoryPartPairs = IncomingBuildConfigurationString.Split('_');
            foreach (var pairString in categoryPartPairs)
            {
                var ids = pairString.Split('-');
                // The key from the build string is EngineSubCategoryId
                if (ids.Length == 2 && int.TryParse(ids[0], out int engineSubCategoryId) && int.TryParse(ids[1], out int partIdVal))
                {
                    Console.WriteLine($"EngineBuilderPage: Parsed from build string - EngineSubCategoryId: {engineSubCategoryId}, PartId: {partIdVal}");
                    if (DbContext.Parts != null)
                    {
                        var part = await DbContext.Parts
                                            .Include(p => p.SubCategory.MainCategory) // Ensure SubCategory and MainCategory are included for display
                                            .FirstOrDefaultAsync(p => p.PartId == partIdVal && p.EngineSubCategoryId == engineSubCategoryId);
                        if (part != null)
                        {
                            BuildStateService.CurrentBuild.SelectPart(engineSubCategoryId, part);
                            Console.WriteLine($"EngineBuilderPage: Loaded Part '{part.Name}' (ID: {part.PartId}) for EngineSubCategoryId {engineSubCategoryId} from build string.");
                        }
                        else { /* ... log part not found ... */ }
                    }
                } else { /* ... log parse error ... */ }
            }
        }
        else if (PassedSelectedPartId.HasValue && PassedSubCategoryId.HasValue) // PassedSubCategoryId is EngineSubCategoryId
        {
            parametersWereProcessedThisCycle = true;
            Console.WriteLine($"EngineBuilderPage: Processing direct selection - EngineSubCategoryID: {PassedSubCategoryId.Value}, PartID: {PassedSelectedPartId.Value}");
            if (DbContext.Parts != null)
            {
                var part = await DbContext.Parts.Include(p => p.SubCategory.MainCategory).FirstOrDefaultAsync(p => p.PartId == PassedSelectedPartId.Value);
                if (part != null && part.EngineSubCategoryId == PassedSubCategoryId.Value)
                {
                    BuildStateService.CurrentBuild.SelectPart(PassedSubCategoryId.Value, part); // Key is EngineSubCategoryId
                    Console.WriteLine($"EngineBuilderPage: Part '{part.Name}' selected for EngineSubCategory {PassedSubCategoryId.Value}.");
                } else { /* ... log error ... */ }
            }
        }

        if (parametersWereProcessedThisCycle)
        {
            Console.WriteLine($"EngineBuilderPage: Parameters processed. Updating UI. SelectedParts count: {BuildStateService.CurrentBuild.SelectedParts.Count}");
            StateHasChanged();
            // await Update3DPreview(); // No 3D for now

            _justProcessedQueryAndNavigated = true;
            Navigation.NavigateTo("/enginebuilder", replace: true);
            Console.WriteLine($"EngineBuilderPage: OnParametersSetAsync - EXITED (after processing and navigating).");
            return;
        }
        Console.WriteLine($"EngineBuilderPage: OnParametersSetAsync - EXITED (no new query parameters processed).");
    }

    private void SelectOrChangePart(int engineSubCategoryId)
    {
        Console.WriteLine($"EngineBuilderPage: Navigating to select part for EngineSubCategoryID: {engineSubCategoryId}");
        Navigation.NavigateTo($"/selectpart/{engineSubCategoryId}"); // PartSelectionPage expects EngineSubCategoryId
    }

    private async Task ClearPartSelection(int engineSubCategoryId)
    {
        Console.WriteLine($"EngineBuilderPage: Clearing part selection for EngineSubCategoryID: {engineSubCategoryId}");
        BuildStateService.CurrentBuild.SelectPart(engineSubCategoryId, null);
        StateHasChanged();
        // await Update3DPreview(); // No 3D
    }

    private void GenerateShareableLink()
    {
        linkCopied = false;
        Console.WriteLine("EngineBuilderPage: GenerateShareableLink - Method ENTERED.");
        if (BuildStateService.CurrentBuild.SelectedParts == null || !BuildStateService.CurrentBuild.SelectedParts.Any())
        { /* ... */ return; }

        // Key in SelectedParts is EngineSubCategoryId
        var buildParts = BuildStateService.CurrentBuild.SelectedParts
            .Where(kvp => kvp.Value != null)
            .Select(kvp => $"{kvp.Key}-{kvp.Value!.PartId}");
        string buildString = string.Join("_", buildParts);

        if (string.IsNullOrEmpty(buildString)) { /* ... */ return; }
        var builderPageUri = Navigation.ToAbsoluteUri("/enginebuilder").ToString();
        shareableLink = $"{builderPageUri}?build={buildString}";
        Console.WriteLine($"EngineBuilderPage: GenerateShareableLink - FINAL link: {shareableLink}");
    }

    private async Task CopyLinkToClipboard() { /* ... same as before ... */
        if (!string.IsNullOrEmpty(shareableLink)) {
            bool success = await JSRuntime.InvokeAsync<bool>("blazorGui.clipboardCopy.copyText", shareableLink);
            linkCopied = success;
            if (success) { _ = Task.Delay(2000).ContinueWith(_ => InvokeAsync(() => { linkCopied = false; StateHasChanged(); })); }
        }
    }
    
    [Inject] private UserManager<ApplicationUser> UserManager { get; set; } = default!;
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    private async Task SaveCurrentBuild() { /* ... same as before, ensure keys used are EngineSubCategoryId if that's how build string is made ... */
        // ... (Make sure buildConfigString in SaveCurrentBuild also uses EngineSubCategoryId as the key from SelectedParts)
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity == null || !user.Identity.IsAuthenticated) { /* ... */ return; }
        var appUser = await UserManager.GetUserAsync(user);
        if (appUser == null) { /* ... */ return; }

        var buildParts = BuildStateService.CurrentBuild.SelectedParts
            .Where(kvp => kvp.Value != null)
            .Select(kvp => $"{kvp.Key}-{kvp.Value!.PartId}"); // Key is EngineSubCategoryId
        string buildConfigString = string.Join("_", buildParts);
        // ... rest of save logic ...
        if (string.IsNullOrWhiteSpace(newBuildName)) { /* ... */ return; }
        var savedBuild = new UserSavedBuild { /* ... UserId, BuildName, BuildConfigurationString, Dates ... */ 
            BuildName = newBuildName,
            UserId = appUser.Id,
            BuildConfigurationString = buildConfigString,
            SavedDate = DateTime.UtcNow,
            LastModifiedDate = DateTime.UtcNow
        };
        try {
            DbContext.UserSavedBuilds.Add(savedBuild);
            await DbContext.SaveChangesAsync();
            saveBuildMessage = "Build saved!"; saveBuildSuccess = true; newBuildName = "";
        } catch (Exception ex) {
            saveBuildMessage = "Error saving build."; saveBuildSuccess = false;
            Console.WriteLine($"SaveBuild EXCEPTION: {ex}");
        }
        StateHasChanged();
    }

    private void ToggleMainCategory(int mainCategoryId)
{
    if (expandedMainCategories.Contains(mainCategoryId)) { expandedMainCategories.Remove(mainCategoryId); }
    else { expandedMainCategories.Add(mainCategoryId); }
}
    // In @code block of EngineBuilderPage.razor
// private HashSet<int> expandedMainCategories = new HashSet<int>(); // Already have this

private void ToggleSubCategoryExpansion(int subCategoryId)
{
    if (expandedSubCategories.Contains(subCategoryId))
    {
        expandedSubCategories.Remove(subCategoryId);
    }
    else
    {
        expandedSubCategories.Add(subCategoryId);
    }
    // StateHasChanged(); // Blazor usually detects changes from @onclick
}

// You already have ToggleMainCategory
// private void ToggleMainCategory(int mainCategoryId) { ... }
// In @code block of EngineBuilderPage.razor
private bool IsSubCategoryExpanded(int subCategoryId)
{
    return expandedSubCategories.Contains(subCategoryId);
}

private void ToggleParentSubCategoryExpansion(int subCategoryId)
{
    if (expandedParentSubCategories.Contains(subCategoryId)) { expandedParentSubCategories.Remove(subCategoryId); }
    else { expandedParentSubCategories.Add(subCategoryId); }
    StateHasChanged(); // Good to have to ensure UI updates for this nested level
}

// Helper to check expansion state (optional, can use .Contains() directly in HTML)
private bool IsParentSubCategoryExpanded(int subCategoryId)
{
    return expandedParentSubCategories.Contains(subCategoryId);
}
}
}