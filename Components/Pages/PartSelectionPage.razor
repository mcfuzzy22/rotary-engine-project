@page "/selectpart/{SubCategoryId:int}"
@rendermode InteractiveServer 

@inject RotaryEngineDbContext DbContext
@inject NavigationManager Navigation
@using rotaryproject.Data.Models
@using Microsoft.EntityFrameworkCore
@using System.Linq.Expressions 
@using rotaryproject.Data
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Identity
<PageTitle>Choose @(currentCategory?.Name ?? "Part")</PageTitle>

@if (isLoading)
{
    <p><em>Loading available parts...</em></p>
}
else if (currentSubCategory != null) // CHANGED to currentSubCategory
{
    <h3>Select a @currentSubCategory.Name 
        @if(currentSubCategory.MainCategory != null)
        {
            <small class="text-muted">(@currentSubCategory.MainCategory.Name)</small>
        }
    </h3>
    <hr />

    @if (partsForSubCategory == null || !partsForSubCategory.Any()) // CHANGED
    {
        <p><em>No parts found for the subcategory: @currentSubCategory.Name.</em></p>
    }
    else
    {
        <div class="list-group">
            @foreach (var part in partsForSubCategory) // CHANGED
            {
                <div class="list-group-item list-group-item-action">
                    <div class="row align-items-center">
                        <div class="col-md-9">
                            <h5 class="mb-1">@part.Name</h5>
                            <p class="mb-1">@(part.Description ?? "No description available.")</p>
                            <small class="text-muted">SKU: @(part.Sku ?? "N/A")</small>
                            <small class="text-muted ms-2">Price: @(part.BasePrice?.ToString("C") ?? "N/A")</small>
                        </div>
                        <div class="col-md-3 text-end">
                            <button class="btn btn-success btn-sm" @onclick="() => SelectThisPart(part.PartId)">
                                Select this @(currentSubCategory.Name.TrimEnd('s'))
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}
else
{
    <p><em>Subcategory not found or specified.</em></p>
}

<div class="mt-4">
    <button class="btn btn-outline-secondary" @onclick="GoBackToBuilder">
        <span class="oi oi-arrow-left" aria-hidden="true"></span> Cancel / Back to Engine Builder
    </button>
</div>

@code {
    [Parameter]
    public int SubCategoryId { get; set; } // CHANGED from CategoryId

    private List<Part>? partsForSubCategory; // RENAMED
    private EngineSubCategory? currentSubCategory; // CHANGED Type and RENAMED
    private bool isLoading = true;
    [Parameter]
    public int CategoryId { get; set; }

    private List<Part>? allPartsForCategory; // All parts for the category before filtering
    private List<Part>? filteredPartsForCategory; // Parts after filtering
    private PartCategory? currentCategory;

    // --- Filter related properties and class ---
    public class FilterOption
    {
        public string Value { get; set; } = string.Empty;
        public bool IsSelected { get; set; }
        public int Count { get; set; } // How many parts have this option value
    }

    private List<FilterOption> brandFilterOptions = new List<FilterOption>();
    private List<FilterOption> materialFilterOptions = new List<FilterOption>();
    // Add List<FilterOption> for other properties you want to filter by (e.g., SizeMm, EngineCompatibility)

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine($"PartSelectionPage: OnParametersSetAsync - Loading parts for SubCategoryId {SubCategoryId}");
        isLoading = true;
        try
        {
            if (DbContext.EngineSubCategories != null && DbContext.Parts != null && SubCategoryId > 0)
            {
                currentSubCategory = await DbContext.EngineSubCategories
                                            .Include(sc => sc.MainCategory) // Include MainCategory for display
                                            .FirstOrDefaultAsync(sc => sc.EngineSubCategoryId == SubCategoryId);

                if (currentSubCategory != null)
                {
                    // Load parts belonging to this subcategory
                    // Ensure p.EngineSubCategoryId casing matches your Part.cs model
                    partsForSubCategory = await DbContext.Parts
                                                .Where(p => p.EngineSubCategoryId == SubCategoryId)
                                                .OrderBy(p => p.Name)
                                                .ToListAsync();
                    Console.WriteLine($"PartSelectionPage: Found {partsForSubCategory?.Count ?? 0} parts for subcategory '{currentSubCategory.Name}'.");
                }
                else
                {
                    Console.WriteLine($"PartSelectionPage: SubCategory with ID {SubCategoryId} not found.");
                    partsForSubCategory = new List<Part>(); 
                }
            }
            else { /* ... handle invalid SubCategoryId or DbContext ... */ InitializeEmpty(); }
        }
        catch (Exception ex) { Console.WriteLine($"PartSelectionPage: Error loading: {ex.ToString()}"); InitializeEmpty(); }
        finally { isLoading = false; }
    }

    private void InitializeEmpty()
    {
        partsForSubCategory = new List<Part>();
        currentSubCategory = null;
    }

    private void SelectThisPart(int partId)
    {
        Console.WriteLine($"PartSelectionPage: PartId {partId} selected for SubCategoryId {SubCategoryId}. Navigating back to builder.");
        // Navigate back to EngineBuilderPage, passing the selection as query parameters
        // EngineBuilderPage expects 'passedCategoryId'. We are sending SubCategoryId as that value.
        // This implies EngineBuildConfiguration will now store selections keyed by SubCategoryId.
        Navigation.NavigateTo($"/enginebuilder?passedCategoryId={SubCategoryId}&passedSelectedPartId={partId}", forceLoad: false);
    }

    private void GoBackToBuilder()
    {
        Navigation.NavigateTo("/enginebuilder");
    }

    private void InitializeEmptyLists()
    {
        allPartsForCategory = new List<Part>();
        filteredPartsForCategory = new List<Part>();
        brandFilterOptions = new List<FilterOption>();
        materialFilterOptions = new List<FilterOption>();
        currentCategory = null;
    }

    private void LoadFilterOptions()
    {
        Console.WriteLine("PartSelectionPage: Loading filter options.");
        if (allPartsForCategory == null || !allPartsForCategory.Any())
        {
            brandFilterOptions = new List<FilterOption>();
            materialFilterOptions = new List<FilterOption>();
            return;
        }

        // Brand Filter Options
        brandFilterOptions = allPartsForCategory
            .Where(p => !string.IsNullOrWhiteSpace(p.Brand))
            .GroupBy(p => p.Brand)
            .Select(g => new FilterOption { Value = g.Key!, IsSelected = false, Count = g.Count() })
            .OrderBy(fv => fv.Value)
            .ToList();

        // Material Filter Options
        materialFilterOptions = allPartsForCategory
            .Where(p => !string.IsNullOrWhiteSpace(p.Material))
            .GroupBy(p => p.Material)
            .Select(g => new FilterOption { Value = g.Key!, IsSelected = false, Count = g.Count() })
            .OrderBy(fv => fv.Value)
            .ToList();
        
        // Add logic here to populate other filter options (e.g., SizeMm, EngineCompatibility)
        // Example for SizeMm (if you want to filter by distinct sizes):
        // sizeMmFilterOptions = allPartsForCategory
        //     .Where(p => !string.IsNullOrWhiteSpace(p.SizeMm))
        //     .GroupBy(p => p.SizeMm)
        //     .Select(g => new FilterOption { Value = g.Key!, IsSelected = false, Count = g.Count() })
        //     .OrderBy(fv => fv.Value)
        //     .ToList();

        Console.WriteLine($"PartSelectionPage: Loaded {brandFilterOptions.Count} brand options, {materialFilterOptions.Count} material options.");
    }

    private void ApplyFilters()
    {
        Console.WriteLine("PartSelectionPage: Applying filters.");
        if (allPartsForCategory == null)
        {
            filteredPartsForCategory = new List<Part>();
            // StateHasChanged(); // Not strictly needed here as it's called by @onchange or ClearFilters
            return;
        }

        IEnumerable<Part> query = allPartsForCategory;

        var selectedBrands = brandFilterOptions.Where(o => o.IsSelected).Select(o => o.Value).ToList();
        if (selectedBrands.Any())
        {
            query = query.Where(p => p.Brand != null && selectedBrands.Contains(p.Brand));
        }

        var selectedMaterials = materialFilterOptions.Where(o => o.IsSelected).Select(o => o.Value).ToList();
        if (selectedMaterials.Any())
        {
            query = query.Where(p => p.Material != null && selectedMaterials.Contains(p.Material));
        }

        // Add more LINQ .Where() clauses here for other active filters
        // e.g., for SizeMm:
        // var selectedSizes = sizeMmFilterOptions.Where(o => o.IsSelected).Select(o => o.Value).ToList();
        // if (selectedSizes.Any())
        // {
        //     query = query.Where(p => p.SizeMm != null && selectedSizes.Contains(p.SizeMm));
        // }

        filteredPartsForCategory = query.ToList();
        Console.WriteLine($"PartSelectionPage: After filtering, {filteredPartsForCategory.Count} parts remain.");
        // StateHasChanged(); // Typically, the @onchange calling this will cause Blazor to re-render.
                           // If list doesn't update, add StateHasChanged() here.
    }

    // This method is called by @onchange of checkboxes.
    // It applies filters and ensures the UI re-renders if needed.
    //private void HandleFilterChange()
    //{
        //ApplyFilters();
        //StateHasChanged(); // Explicitly call StateHasChanged after filters are applied by checkbox change
    //}/

    private void ClearFilters()
    {
        Console.WriteLine("PartSelectionPage: Clearing all filters.");
        brandFilterOptions.ForEach(o => o.IsSelected = false);
        materialFilterOptions.ForEach(o => o.IsSelected = false);
        // Reset other filter option lists (e.g., sizeMmFilterOptions.ForEach(o => o.IsSelected = false);)
        
        ApplyFilters(); // Re-apply filters (which will now be empty)
        StateHasChanged(); // Ensure UI updates
    }
}