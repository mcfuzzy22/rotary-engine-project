@page "/partdetail/{PartId:int}"
@implements IAsyncDisposable

@using rotaryproject.Data
@using rotaryproject.Data.Models
@using Microsoft.EntityFrameworkCore

@inject RotaryEngineDbContext DbContext
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Part Details (Ultra-Minimal Test)</h3>

@if (isLoading)
{
    <p>STATE: isLoading is true. PartId: @PartId</p>
}
else if (notFound)
{
    <p>STATE: notFound is true. PartId: @PartId</p>
}
@* ... other @if conditions for isLoading / notFound ... *@
else if (part != null)
{
    <div>
        <h4>@part.Name</h4> @* This is safe if part is not null and Name is a string *@
        <p>Model Path: @(part.ModelPath ?? "N/A")</p>
        <p>Category: @(part.Category?.Name ?? "N/A")</p> @* Use null-conditional for navigation properties *@

        @* Canvas for the 3D viewer *@
        <canvas id="@viewerCanvasId" style="width: 100%; height: 400px; touch-action: none; border: 1px solid green; background-color: #f0f0f0;"></canvas>
        <p id="modelError" style="color: red; min-height: 20px;"></p>
    </div>
}
// ... rest of the page ...
else
{
    <p>STATE: ERROR - part is NULL, not loading, and not 'notFound'. PartId: @PartId</p>
}

@code {
    [Parameter]
    public int PartId { get; set; }

    private Part? part;
    private bool isLoading = true;
    private bool notFound = false;
   private string viewerCanvasId = $"babylon-canvas-{Guid.NewGuid()}";
    private bool _isEngineInitialized = false;
    private string? _currentLoadedModelPath;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"PartDetailPage ({PartId}): OnInitializedAsync - ENTERED.");
        try
        {
            await base.OnInitializedAsync();
            // Any other component-specific initialization logic NOT dependent on parameters would go here.
        }
        catch (Exception ex)
        {
            Console.WriteLine($"PartDetailPage ({PartId}): EXCEPTION in OnInitializedAsync: {ex.ToString()}");
            // Consider setting an error state here to display to the user
            isLoading = false; // Ensure isLoading is false so the error message might show
            notFound = true;   // Or use a dedicated error message property
            // errorMessage = $"Critical error during initialization: {ex.Message}";
        }
        Console.WriteLine($"PartDetailPage ({PartId}): OnInitializedAsync - EXITED.");
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine($"PartDetailPage ({PartId}): OnParametersSetAsync - ENTERED.");
        isLoading = true;
        notFound = false;
        // part = null; // Let's load into a new variable first to compare
        string? previousModelPath = _currentLoadedModelPath;

        Console.WriteLine($"PartDetailPage ({PartId}): Loading data for PartId {PartId}");
        Part? loadedPart = null; // Use a local variable for the fetch
        try
        {
            if (DbContext.Parts != null && PartId > 0)
            {
                loadedPart = await DbContext.Parts
                                    .Include(p => p.Category)
                                    .FirstOrDefaultAsync(p => p.PartId == PartId); // Ensure p.PartId matches your Part.cs

                if (loadedPart == null)
                {
                    Console.WriteLine($"PartDetailPage ({PartId}): PartId {PartId} not found in database.");
                    notFound = true;
                }
                else
                {
                    Console.WriteLine($"PartDetailPage ({PartId}): Part '{loadedPart.Name}' loaded. ModelPath: '{loadedPart.ModelPath}'");
                }
            }
            else if (PartId <= 0)
            {
                Console.WriteLine($"PartDetailPage ({PartId}): Invalid PartId {PartId} from route.");
                notFound = true;
            }
            else
            {
                Console.WriteLine($"PartDetailPage ({PartId}): Error: Parts DbSet is null.");
                notFound = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"PartDetailPage ({PartId}): EXCEPTION in OnParametersSetAsync data loading: {ex.ToString()}");
            notFound = true;
            loadedPart = null; // Ensure part is null if data loading fails
        }
        finally
        {
            isLoading = false; // Must be set false so UI can update from loading state
        }

        bool modelPathActuallyChanged = (this.part?.ModelPath != loadedPart?.ModelPath);
        bool partIdActuallyChanged = (this.part?.PartId != loadedPart?.PartId);

        this.part = loadedPart; // Now assign to the component's part field

        // Only try to reload the model if the engine is already up AND the part changed meaningfully for the model
        if (_isEngineInitialized && this.part != null && !string.IsNullOrEmpty(this.part.ModelPath) && (partIdActuallyChanged || modelPathActuallyChanged))
        {
            Console.WriteLine($"PartDetailPage ({PartId}): OnParametersSetAsync - Engine initialized and model/part changed. Attempting to reload model: {this.part.ModelPath}");
            await SafeLoadModel(this.part.ModelPath);
        }
        else if (_isEngineInitialized && this.part == null && _currentLoadedModelPath != null) // Part became null, clear model
        {
            Console.WriteLine($"PartDetailPage ({PartId}): OnParametersSetAsync - Part is now null, clearing previous model.");
            await SafeLoadModel(null);
        }
        Console.WriteLine($"PartDetailPage ({PartId}): OnParametersSetAsync - EXITED.");
    }

    // In @code block of PartDetailPage.razor
protected override async Task OnAfterRenderAsync(bool firstRender)
{
    Console.WriteLine($"PartDetailPage ({PartId}): OnAfterRenderAsync - ENTERED. firstRender = {firstRender}, isLoading = {isLoading}, part is null = {(part == null)}, _isEngineInitialized = {_isEngineInitialized}");
    if (firstRender)
    {
        try
        {
            Console.WriteLine($"PartDetailPage ({PartId}): (firstRender = true) - Testing basic JS interop PING.");
            string pingResult = await JSRuntime.InvokeAsync<string>("myJsFunctions.pingBlazor");
            Console.WriteLine($"PartDetailPage ({PartId}): PING from JS returned: '{pingResult}'"); // SERVER LOG

            // Now try to initialize Babylon
            Console.WriteLine($"PartDetailPage ({PartId}): About to call JSRuntime for 'blazorModelViewer.init'.");
            _isEngineInitialized = await JSRuntime.InvokeAsync<bool>("blazorModelViewer.init", viewerCanvasId);
            Console.WriteLine($"PartDetailPage ({PartId}): JS 'blazorModelViewer.init' returned: {_isEngineInitialized}");

            if (_isEngineInitialized && part != null && !string.IsNullOrEmpty(part.ModelPath))
            {
                Console.WriteLine($"PartDetailPage ({PartId}): Initial model load for: {part.ModelPath}");
                await SafeLoadModel(part.ModelPath);
            }
            else if (_isEngineInitialized)
            {
                 Console.WriteLine($"PartDetailPage ({PartId}): Engine initialized, but no part/modelPath to load on first render.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"PartDetailPage ({PartId}): EXCEPTION IN OnAfterRenderAsync (firstRender block): {ex.ToString()}");
            await SetModelError($"JS Interop Error during 3D init/ping: {ex.Message}");
        }
    }
    Console.WriteLine($"PartDetailPage ({PartId}): OnAfterRenderAsync - EXITED.");
}
    private async Task SafeLoadModel(string? modelPath)
    {
        // ... (SafeLoadModel function as provided before)
        if (!_isEngineInitialized)
        {
            Console.WriteLine($"PartDetailPage ({PartId}): SafeLoadModel - Engine not initialized, cannot load model '{modelPath}'.");
            await SetModelError("3D viewer not ready.");
            return;
        }

        if (string.IsNullOrEmpty(modelPath))
        {
             Console.WriteLine($"PartDetailPage ({PartId}): SafeLoadModel - Received null/empty modelPath, attempting to clear model.");
             _currentLoadedModelPath = null;
        }
        else if (_currentLoadedModelPath == modelPath && modelPath != null) // Check modelPath not null here
        {
            Console.WriteLine($"PartDetailPage ({PartId}): SafeLoadModel - Model '{modelPath}' is already the current one.");
            return;
        }
        
        _currentLoadedModelPath = modelPath;
        Console.WriteLine($"PartDetailPage ({PartId}): About to call JSRuntime for 'blazorModelViewer.loadModel' with path: {modelPath ?? "null (clearing model)"}");
        try
        {
            await JSRuntime.InvokeVoidAsync("blazorModelViewer.loadModel", modelPath);
            Console.WriteLine($"PartDetailPage ({PartId}): JS 'blazorModelViewer.loadModel' call completed for path: {modelPath ?? "null"}");
            if (!string.IsNullOrEmpty(modelPath)) { await SetModelError(null); }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"PartDetailPage ({PartId}): EXCEPTION during 'blazorModelViewer.loadModel' for path '{modelPath}': {ex.ToString()}");
            await SetModelError($"JS Interop Error loading model: {ex.Message}");
            // If load failed, should we reset _currentLoadedModelPath so a retry is possible?
            // Or assume it will be retried if parameters change. For now, leave it.
        }
    }

    private async Task SetModelError(string? message)
    {
        // ... (SetModelError function as provided before)
        try
        {
            string jsMessage = message?.Replace("'", "\\'")?.Replace("\r", "\\r")?.Replace("\n", "\\n") ?? "";
            await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('modelError').innerText = '{jsMessage}';");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"PartDetailPage ({PartId}): Error setting modelError P tag via JS: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        Console.WriteLine($"PartDetailPage ({PartId}): DisposeAsync - ENTERED. Cleaning up 3D viewer.");
        try
        {
            if (_isEngineInitialized)
            {
                Console.WriteLine($"PartDetailPage ({PartId}): Calling JS 'blazorModelViewer.dispose'.");
                await JSRuntime.InvokeVoidAsync("blazorModelViewer.dispose");
                _isEngineInitialized = false;
                _currentLoadedModelPath = null;
                 Console.WriteLine($"PartDetailPage ({PartId}): JS 'blazorModelViewer.dispose' call completed.");
            }
        }
        catch (JSDisconnectedException jsex)
        {
            Console.WriteLine($"PartDetailPage ({PartId}): JSDisconnectedException during dispose: {jsex.Message}.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"PartDetailPage ({PartId}): EXCEPTION during DisposeAsync: {ex.ToString()}");
        }
        Console.WriteLine($"PartDetailPage ({PartId}): DisposeAsync - EXITED.");
    }
}